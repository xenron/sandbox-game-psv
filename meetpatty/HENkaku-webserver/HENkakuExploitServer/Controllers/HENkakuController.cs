using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using System.IO;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web;
using System.Web.Http;

namespace HENkakuExploitServer.Controllers
{
	[RoutePrefix("api")]
    public class HENkakuController : ApiController
    {
		[Route("{request}")]
		[HttpGet]
		public HttpResponseMessage GetPayload(string request)
		{
			var path = @"base_payload.bin";
			HttpResponseMessage result = new HttpResponseMessage(HttpStatusCode.OK);

			var addresses = new UInt32[7];

			var parts = request.Split(new[] { "&" }, StringSplitOptions.RemoveEmptyEntries);

			foreach (var part in parts)
			{
				var regex = @"a(?<addNum>\d)=(?<address>.*)";
				var match = Regex.Match(part.ToLower(), regex);
				if (match.Success)
				{
					var addressNum = Int32.Parse(match.Groups["addNum"].Value);
					addresses[addressNum - 1] = UInt32.Parse(match.Groups["address"].Value, System.Globalization.NumberStyles.AllowHexSpecifier);
				}
			}

			var payload = Models.HenkakuPayloadGenerator.GeneratePayload(addresses[0],
				addresses[1],
				addresses[2],
				addresses[3],
				addresses[4],
				addresses[5],
				addresses[6]);

			result.Content = new StreamContent(new MemoryStream(payload));
			result.Content.Headers.ContentType =
				 new MediaTypeHeaderValue("application/octet-stream");
			return result;

		}
    }
}
